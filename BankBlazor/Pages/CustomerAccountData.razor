@page "/customer_account/data"

@using BankDataAccessLibrary
@using BankDataAccessLibrary.Models
@using BankBlazor.Data
@*@inject CustomerAccountService CustomerAccountService*@

<h1>CustomerAccount</h1>

<p>This component demonstrates fetching data from a service.</p>

<h4>Create Account</h4>

<EditForm Model="@customerAccountInput" OnValidSubmit="@CreateAccount">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="name" @bind-Value="customerAccountInput.Name" />
    <InputText id="address" @bind-Value="customerAccountInput.Address" />

    <button type="submit" class="btn btn-primary">Create</button>

</EditForm>

<h4>Deposit</h4>

<EditForm Model="@customerAccountInput" OnValidSubmit="@Deposit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputNumber id="accountNumber" @bind-Value="customerAccountInput.Number" />
    <InputNumber id="amount" @bind-Value="customerAccountInput.Amount" />

    <button type="submit" class="btn btn-primary">Put Money</button>

</EditForm>

<h4>Transfer Money</h4>

<EditForm Model="@transferMoneyInput" OnValidSubmit="@Transfer">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputNumber id="fromAccountNumber" @bind-Value="transferMoneyInput.FromAccountNumber" />
    <InputNumber id="toAccountNumber" @bind-Value="transferMoneyInput.ToAccountNumber" />
    <InputNumber id="amount" @bind-Value="transferMoneyInput.Amount" />

    <button type="submit" class="btn btn-primary">Transfer</button>

</EditForm>

<h4>All Accounts</h4>

@if (customerAccounts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Number</th>
                <th>Name</th>
                <th>Address</th>
                <th>IBAN</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customerAccount in customerAccounts)
            {
                <tr>
                    <td>@customerAccount.Number</td>
                    <td>@customerAccount.Name</td>
                    <td>@customerAccount.Address</td>
                    <td>@customerAccount.IBAN</td>
                    <td>@customerAccount.Amount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CustomerAccountModel> customerAccounts;
    private CustomerAccountModel customerAccountInput = new CustomerAccountModel();
    private TransferMoneyInputModel transferMoneyInput = new TransferMoneyInputModel();

    protected override async Task OnInitializedAsync()
    {
        customerAccounts = SqliteDataAccess.LoadAccounts();
    }

    protected void CreateAccount()
    {
        CustomerAccountModel input = new CustomerAccountModel()
        {
            Name = customerAccountInput.Name,
            Address = customerAccountInput.Address,
            Amount = 0,
            IBAN = Guid.NewGuid().ToString(),
            CreatedWhen = DateTime.UtcNow.ToString(),
            LastModifiedWhen = DateTime.UtcNow.ToString()
        };

        SqliteDataAccess.SaveAccount(input);

        customerAccounts = SqliteDataAccess.LoadAccounts();

        customerAccountInput = new CustomerAccountModel();
    }

    protected void Deposit()
    {

        CustomerAccountModel acctToUpdate = SqliteDataAccess.LoadAccountByAccountNumber(customerAccountInput.Number);

        acctToUpdate.Amount = acctToUpdate.Amount + (customerAccountInput.Amount * (decimal)0.99);

        SqliteDataAccess.UpdateAccount(acctToUpdate);

        customerAccounts = SqliteDataAccess.LoadAccounts();

        customerAccountInput = new CustomerAccountModel();
    }

    protected void Transfer()
    {

        CustomerAccountModel fromAccount = SqliteDataAccess.LoadAccountByAccountNumber(transferMoneyInput.FromAccountNumber);
        CustomerAccountModel toAccount = SqliteDataAccess.LoadAccountByAccountNumber(transferMoneyInput.ToAccountNumber);

        fromAccount.Amount = fromAccount.Amount - transferMoneyInput.Amount;

        SqliteDataAccess.UpdateAccount(fromAccount);

        toAccount.Amount = toAccount.Amount + transferMoneyInput.Amount;

        SqliteDataAccess.UpdateAccount(toAccount);

        customerAccounts = SqliteDataAccess.LoadAccounts();

        transferMoneyInput = new TransferMoneyInputModel();
    }
}
